import axios, { AxiosError } from 'axios';
import { Node, Edge } from 'reactflow';

// Configuration de l'API
// Avec Vite, les variables d'environnement sont accessibles via import.meta.env
// et doivent √™tre pr√©fix√©es par VITE_
const API_URL = 'http://localhost:8000/api';

// Configuration d'Axios avec timeout et retry
const apiClient = axios.create({
  baseURL: API_URL,
  timeout: 30000, // 30 secondes de timeout
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json'
  }
});

// Intercepteur pour les requ√™tes
apiClient.interceptors.request.use(
  (config) => {
    console.log(`üîÑ Requ√™te API: ${config.method?.toUpperCase()} ${config.url}`);
    return config;
  },
  (error) => {
    console.error('‚ùå Erreur lors de la configuration de la requ√™te:', error);
    return Promise.reject(error);
  }
);

// Intercepteur pour les r√©ponses
apiClient.interceptors.response.use(
  (response) => {
    console.log(`‚úÖ R√©ponse API: ${response.status} ${response.config.method?.toUpperCase()} ${response.config.url}`);
    return response;
  },
  async (error: AxiosError) => {
    if (error.response) {
      // La requ√™te a √©t√© faite et le serveur a r√©pondu avec un code d'√©tat en dehors de la plage 2xx
      const errorDetail = error.response.data && typeof error.response.data === 'object' && 'detail' in (error.response.data as any)
        ? (error.response.data as any).detail
        : JSON.stringify(error.response.data);
      console.error(`‚ùå Erreur API ${error.response.status}: ${errorDetail}`);
    } else if (error.request) {
      // La requ√™te a √©t√© faite mais aucune r√©ponse n'a √©t√© re√ßue
      console.error('‚ùå Pas de r√©ponse du serveur. V√©rifiez que le backend est en cours d\'ex√©cution.');
    } else {
      // Une erreur s'est produite lors de la configuration de la requ√™te
      console.error('‚ùå Erreur de configuration de la requ√™te:', error.message);
    }
    return Promise.reject(error);
  }
);

// Interface pour les donn√©es d'un assistant
export interface Assistant {
  id?: string;
  name: string;
  description?: string;
  nodes: Node[];
  edges: Edge[];
  is_published?: boolean;
  publish_date?: string;
  public_id?: string;
  public_url?: string;
  embed_script?: string;
  created_at?: string;
  updated_at?: string;
}

// Interface pour la r√©ponse du script d'int√©gration
export interface EmbedScriptResponse {
  script: string;
  public_url: string;
}

// Fonction pour logger les erreurs avec plus de d√©tails
const logError = (message: string, error: any) => {
  console.error(`‚ùå ${message}`);
  if (error.response) {
    console.error(`  Status: ${error.response.status}`);
    console.error(`  Data:`, error.response.data);
  } else if (error.request) {
    console.error(`  Pas de r√©ponse du serveur. V√©rifiez que le backend est en cours d'ex√©cution.`);
  } else {
    console.error(`  Message: ${error.message}`);
  }
  console.error(`  Stack:`, error.stack);
};

// Service API pour les assistants
const AssistantService = {
  // R√©cup√©rer tous les assistants
  async getAll(): Promise<Assistant[]> {
    try {
      console.log('üîç R√©cup√©ration de tous les assistants...');
      // Utiliser directement axios pour cette requ√™te pour √©viter les probl√®mes potentiels
      const response = await axios.get(`${API_URL}/assistants`, {
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        timeout: 10000
      });
      console.log(response.data);
      return response.data;
    } catch (error: any) {
      logError('Erreur lors de la r√©cup√©ration des assistants', error);
      throw error;
    }
  },

  // R√©cup√©rer un assistant par son ID
  async getById(id: string): Promise<Assistant> {
    try {
      console.log(`üîç R√©cup√©ration de l'assistant ${id}...`);
      // Utiliser directement axios pour cette requ√™te √©galement
      const response = await axios.get(`${API_URL}/assistants/${id}`, {
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        timeout: 10000
      });
      console.log(`‚úÖ Assistant ${id} r√©cup√©r√© avec succ√®s:`, response.data.name);
      return response.data;
    } catch (error: any) {
      logError(`Erreur lors de la r√©cup√©ration de l'assistant ${id}`, error);
      throw error;
    }
  },

  // Cr√©er un nouvel assistant
  async create(assistant: Assistant): Promise<Assistant> {
    try {
      console.log('üìù Cr√©ation d\'un nouvel assistant...');
      const response = await axios.post(`${API_URL}/assistants`, assistant, {
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        timeout: 15000 // Donner plus de temps pour la cr√©ation
      });
      console.log('‚úÖ Assistant cr√©√© avec succ√®s:', response.data.id);
      return response.data;
    } catch (error: any) {
      logError('Erreur lors de la cr√©ation de l\'assistant', error);
      throw error;
    }
  },

  // Mettre √† jour un assistant existant
  async update(id: string, assistant: Partial<Assistant>): Promise<Assistant> {
    try {
      console.log(`üìù Mise √† jour de l'assistant ${id}...`);
      const response = await axios.put(`${API_URL}/assistants/${id}`, assistant, {
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        timeout: 15000
      });
      console.log(`‚úÖ Assistant ${id} mis √† jour avec succ√®s`);
      return response.data;
    } catch (error: any) {
      logError(`Erreur lors de la mise √† jour de l'assistant ${id}`, error);
      throw error;
    }
  },

  // Supprimer un assistant
  async delete(id: string): Promise<void> {
    try {
      console.log(`üöÆ Suppression de l'assistant ${id}...`);
      await axios.delete(`${API_URL}/assistants/${id}`, {
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        timeout: 10000
      });
      console.log(`‚úÖ Assistant ${id} supprim√© avec succ√®s`);
    } catch (error: any) {
      logError(`Erreur lors de la suppression de l'assistant ${id}`, error);
      throw error;
    }
  },

  // Sauvegarder le flowchart d'un assistant (nodes et edges)
  async saveFlowchart(id: string, nodes: Node[], edges: Edge[]): Promise<Assistant> {
    try {
      console.log(`üíæ Sauvegarde du flowchart de l'assistant ${id}...`);
      
      // Calculer la taille approximative des donn√©es
      const data = { nodes, edges, updated_at: new Date().toISOString() };
      const dataSize = JSON.stringify(data).length;
      console.log(`Taille des donn√©es: ${(dataSize / 1024).toFixed(2)} KB`);
      
      // Configuration de la requ√™te
      let timeout = 30000; // 30 secondes par d√©faut
      
      // Si les donn√©es sont volumineuses, augmenter le timeout
      if (dataSize > 1024 * 1024) { // Plus de 1MB
        timeout = 60000; // 60 secondes pour les gros flowcharts
        console.log('‚ö†Ô∏è Donn√©es volumineuses, timeout augment√© √† 60s');
      }
      
      // Utiliser axios directement
      const response = await axios.put(`${API_URL}/assistants/${id}`, data, {
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        timeout: timeout
      });
      
      console.log(`‚úÖ Flowchart de l'assistant ${id} sauvegard√© avec succ√®s`);
      return response.data;
    } catch (error: any) {
      logError(`Erreur lors de la sauvegarde du flowchart de l'assistant ${id}`, error);
      throw error;
    }
  },

  // Importer un assistant depuis un fichier JSON
  async importFromJson(jsonData: any): Promise<Assistant> {
    try {
      console.log('üì• Importation d\'un assistant depuis JSON...');
      
      // V√©rifier que le JSON contient les donn√©es n√©cessaires
      if (!jsonData.name || !jsonData.nodes || !jsonData.edges) {
        throw new Error('Le fichier JSON ne contient pas les donn√©es n√©cessaires (name, nodes, edges)');
      }
      
      // Cr√©er l'assistant
      const response = await axios.post(`${API_URL}/assistants`, jsonData, {
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        timeout: 30000 // Donner plus de temps pour l'importation
      });
      
      console.log('‚úÖ Assistant import√© avec succ√®s:', response.data.id);
      return response.data;
    } catch (error: any) {
      logError('Erreur lors de l\'importation de l\'assistant', error);
      throw error;
    }
  },

  // Publier ou d√©publier un assistant
  async publishAssistant(id: string, isPublished: boolean): Promise<Assistant> {
    try {
      console.log(`${isPublished ? 'üí¨ Publication' : 'üîí D√©publication'} de l'assistant ${id}...`);
      const response = await axios.put(`${API_URL}/assistants/${id}/publish`, { is_published: isPublished }, {
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        timeout: 15000
      });
      console.log(`‚úÖ Assistant ${id} ${isPublished ? 'publi√©' : 'd√©publi√©'} avec succ√®s`);
      return response.data;
    } catch (error: any) {
      logError(`Erreur lors de la ${isPublished ? 'publication' : 'd√©publication'} de l'assistant ${id}`, error);
      throw error;
    }
  },

  // Obtenir le script d'int√©gration pour un assistant publi√©
  async getEmbedScript(id: string): Promise<EmbedScriptResponse> {
    try {
      console.log(`üíª G√©n√©ration du script d'int√©gration pour l'assistant ${id}...`);
      const response = await axios.get(`${API_URL}/assistants/${id}/embed`, {
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        timeout: 10000
      });
      console.log(`‚úÖ Script d'int√©gration g√©n√©r√© avec succ√®s`);
      return response.data;
    } catch (error: any) {
      logError(`Erreur lors de la g√©n√©ration du script d'int√©gration pour l'assistant ${id}`, error);
      throw error;
    }
  }
};

export default AssistantService;
